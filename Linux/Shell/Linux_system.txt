Linux: Linus Torvalds developed his own kernel and a few programs around it in 1991 which later became
a full flagged Operating System.

Linux Shell: Users communicate with the Kernel through a program known as the shell. The shell is a 
command line interpreter; it translates commands entered by the user and converts them into a language
that is understood by the kernel.

Linux Architecture: Application programs -> Shell -> Kernel -> Hardware

Basic 4 units:
Kernel − The kernel is the heart of the Linux operating system. It interacts with the hardware and most of the tasks like memory management, 
task scheduling and file management.

Shell − The shell is the utility that processes your requests. When you type in a command at your 
terminal, the shell interprets the command and calls the program that you want. 
The shell uses standard syntax for all commands. 
C Shell, Bourne Shell and Korn Shell are the most famous shells which are available with most of the 
Unix variants.

Commands and Utilities − There are various commands and utilities which you can make use of in your day
to day activities. ftp, ssh, cp, mv, cat and grep, etc. are few examples of commands and utilities. 
There are over 250 standard commands plus numerous others provided through 3rd party software. 
All the commands come along with various options.

Files and Directories − All the data of Unix is organized into files. All files are then organized into
directories. These directories are further organized into a tree-like structure called the filesystem.

Linux Licensing: Linux is one of the most suitable examples of free and open-source software applciation.
Linux source code may be used, modified, and distributed commercially or non-commercially by anyone 
under the terms of its respective licenses, such as the GNU General Public License (GPL).

Getting started:
	Change Password: use command passwd
	Listing Directories and Files: ls -la 
	Changing Directories: 
		Go to directory abc: cd abc 
		Go back to parent directory: cd ..
	Who are you: whoami(shows current user name)
	Who is Logged in?: who, users
	Checking disk usage: df -h
	
File Management:	
	Listing Files: ls -la
	Types of files:
		- Regular file, such as an ASCII text file, binary executable, or hard link.
		b Block special file. Block input/output device file such as a physical hard drive.
		c Character special file. Raw input/output device file such as a physical hard drive.
		d Directory which contains a listing of other files and directories.
		l Symbolic link file. Links on any regular file.
		p Named pipe. A mechanism for interprocess communications.
		s Socket which is used for interprocess communication.
	Hidden Files in Linux:
		.profile: The Bourne shell ( sh) initialization script
        .kshrc: The Korn shell ( ksh) initialization script
        .cshrc: The C shell ( csh) initialization script
        .rhosts: The remote shell configuration file
	Single dot (.) − This represents the current directory.
    Double dot (..) − This represents the parent directory.	
	
	Creating Files in Linux: vi filename
		l key to move to the right side.
		h key to move to the left side.
		k key to move upside in the file.
		j key to move downside in the file.
	Display Content of a File: cat filename
	Counting Words in a File: wc filename
	Copying Files in Linux: cp source_file destination_file
	Renaming Files in Linux: mv old_file new_file
	Deleting Files in Linux: rm filename
	Creating Links on Files: Linux provides link mechanism to access a file from another location.
			You can say these links are alternate names for the existing files. These links could be 
			symbolic links or hard links.
			Command to create a symbolic link on filename: $ ln -s filename symlink
			Command to create hard link on an existing file: $ ln filename hardlink
			
Directory management:
	/bin: important binary applications
	/boot: boot configuration files, kernels, and other files needed at boot time.
	/dev: System device files.
	/etc: configuration files, startup scripts, etc.
	/home: List of home directories for different users
	/lib: system libraries, shared libraries
	/lost+found: a lost+found system for files that exist under the root (/) directory
	/media: automatically mounted (loaded) partitions on your hard drive and removable media such as CDs, digital cameras, etc.
	/mnt: manually mounted filesystems on your hard drive
	/opt: 3rd part applications to be installed
	/proc: Maintains information about the state of the system, including currently running processes.
	/root: root user's home directory.
	/sbin: important system binaries
	/srv: contain files that are served to other systems
	/sys: system files
	/tmp: temporary files
	/usr: applications and files that are mostly available for all users to access
	/var: variable files such as logs and databases

	Home Directory: cd ~
	last directory: cd -
	Listing Directories: $ls dirname
	Creating Directories: $mkdir dirname
	Removing Directories: $rmdir dirname1 dirname2 dirname3
	Changing Directories: $cd dirname
	Renaming Directories: $mv olddir newdir
	
File permissions:
	Owner permissions − The owner's permissions determine what actions the owner of the file can perform on the file.
	Group permissions − The group's permissions determine what actions a user, who is a member of the group that a file belongs to, can perform on the file.
	Other (world) permissions − The permissions for others indicate what action all other users can perform on the file.
	
	File Access Modes: Read, write, execute
	Changing Permissions: chmod
	0	No permission	---
	1	Execute permission	--x
	2	Write permission	-w-
	3	Execute and write permission: 1 (execute) + 2 (write) = 3	-wx
	4	Read permission	r--
	5	Read and execute permission: 4 (read) + 1 (execute) = 5	r-x
	6	Read and write permission: 4 (read) + 2 (write) = 6	rw-
	7	All permissions: 4 (read) + 2 (write) + 1 (execute) = 7	rwx
	
	Changing Ownership: chown amrood testfile	
	Changing Group Ownership: chgrp group filelist
	
Unix environment:
	When you log in to the system, the shell undergoes a phase called initialization to set up the environment. This is usually a two-step process that involves the shell reading the following files −
	1) /etc/profile
	2) profile
	The process is as follows − The shell checks to see whether the file /etc/profile exists.
	If it exists, the shell reads it. Otherwise, this file is skipped. No error message is displayed.
	The shell checks to see whether the file .profile exists in your home directory. Your home directory is the directory that you start out in after you log in.
	If it exists, the shell reads it; otherwise, the shell skips it. No error message is displayed.
	
	The .profile File: The file /etc/profile is maintained by the system administrator of your 
	Unix machine and contains shell initialization information required by all users on a system.
	The file .profile is under your control. You can add as much shell customization information 
	as you want to this file.
	
	Setting the PATH: The PATH variable specifies the locations in which the shell should look for 
	commands. Usually the Path variable is set as follows − 
	$PATH=/bin:/usr/bin
	Here, each of the individual entries separated by the colon character (:) are directories. If you request the shell to execute a command and it cannot find it in any of the directories given in the PATH variable, a message similar to the followin

Unix / Linux - Pipes and Filters:
	You can connect two commands together so that the output from one program becomes the input of the
	next program. Two or more commands connected in this way form a pipe.
	To make a pipe, put a vertical bar (|) on the command line between two commands.
	When a program takes its input from another program, it performs some operation on that input,
	and writes the result to the standard output. It is referred to as a filter.
	
	The grep Command: The grep command searches a file or files for lines that have a certain pattern. 
	The syntax is − $grep pattern file(s)
	ls -l | grep "Aug"
	
Linux - Processes Management:
	Starting a Process: When you start a process (run a command), there are two ways you can run it −
	Foreground Processes: By default, every process that you start runs in the foreground. It gets its
		input from the keyboard and sends its output to the screen.
	Background Processes: A background process runs without being connected to your keyboard. 
		If the background process requires any keyboard input, it waits.
		The advantage of running a process in the background is that you can run other commands; 
		you do not have to wait until it completes to start another!
		The simplest way to start a background process is to add an ampersand (&) at the end of the command.
	
	Listing Running Processes: ps(-a/-x/-u/-e)
	Stopping Processes: Ending a process can be done in several different ways. Often, 
	from a console-based command, sending a CTRL + C keystroke (the default interrupt character) will
	exit the command. This works when the process is running in the foreground mode.
	
	Parent and Child Processes: Each unix process has two ID numbers assigned to it: The Process ID (pid) 
		and the Parent process ID (ppid). Each user process in the system has a parent process.
		Most of the commands that you run have the shell as their parent. Check the ps -f example where this command listed both the process ID and the parent process ID.
		
	Zombie and Orphan Processes: Normally, when a child process is killed, the parent process is updated
		via a SIGCHLD signal. Then the parent can do some other task or restart a new child as needed.
		However, sometimes the parent process is killed before its child is killed. In this case, the 
		"parent of all processes," the init process, becomes the new PPID (parent process ID). 
		In some cases, these processes are called orphan processes.
		When a process is killed, a ps listing may still show the process with a Z state. This is a zombie or defunct process. The process is dead and not being used. These processes are different from the orphan processes. They have completed execution but still find an entry in the process table.

	Daemon Processes: Daemons are system-related background processes that often run with the 
		permissions of root and services requests from other processes.
		A daemon has no controlling terminal. It cannot open /dev/tty. If you do a "ps -ef" and look
		at the tty field, all daemons will have a ? for the tty.
	
	The top Command: The top command is a very useful tool for quickly showing processes sorted by 
	various criteria.
	

Linux - Network Communication Utilities:
	The ping Utility: The ping command sends an echo request to a host available on the network.
	Using this command, you can check if your remote host is responding well or not.
	The ping command is useful for the following −
	1) Tracking and isolating hardware and software problems.
	2) Determining the status of the network and various foreign hosts.
	3) Testing, measuring, and managing networks.
	
	The ftp Utility: Here, ftp stands for File Transfer Protocol. This utility helps you upload
		and download your file from one computer to another computer.
		$ftp hostname or ip-address
	
	The telnet Utility: There are times when we are required to connect to a remote Unix machine and 
		work on that machine remotely. Telnet is a utility that allows a computer user at one site to
		make a connection, login and then conduct work on a computer at another site.
		Ex: telnet amrood.com
		
	The finger Utility: The finger command displays information about users on a given host. 
		The host can be either local or remote.	
		
The vi Editor Tutorial:
	vi filename: Creates a new file if it already does not exist, otherwise opens an existing file.
	vi -R filename: Opens an existing file in the read-only mode.
	view filename: Opens an existing file in the read-only mode.
	
	Operation Modes:
		Command mode − This mode enables you to perform administrative tasks such as saving the files,
		executing the commands, moving the cursor, cutting (yanking) and pasting the lines or words,
		as well as finding and replacing. In this mode, whatever you type is interpreted as a command.

		Insert mode − This mode enables you to insert text into the file. Everything that's typed in
		this mode is interpreted as input and placed in the file.
		
	Commands:
		:q ->to quit out of vi 
		:q! ->to quit out of vi without saving file
		:ZZ -> save your changes and exit vi
		:wq -> save your changes and exit vi
		
	Moving within a File: 
		k - Moves the cursor up one line
		j - Moves the cursor down one line
		h - Moves the cursor to the left one character position
		l - Moves the cursor to the right one character position
		
Shell Scripting:
	The Bourne Shell
	The C Shell
	The Korn Shell
	The GNU Bourne-Again Shell
	
	Read from user: read PERSON
	
	Shell Prompt: The prompt, $, which is called the command prompt, is issued by the shell.
		While the prompt is displayed, you can type a command.
		
	Shell Types: In Unix, there are two major types of shells −
		Bourne shell − If you are using a Bourne-type shell, the $ character is the default prompt.(sh, ksh, bash)
		C shell − If you are using a C-type shell, the % character is the default prompt.

	#!/bin/sh: This tells the system that the commands that follow are to be executed by the Bourne
		shell. 
		
	Variable Types: 
		Local Variables − A local variable is a variable that is present within the current instance of 
		the shell. It is not available to programs that are started by the shell. They are set at the
		command prompt.

		Environment Variables − An environment variable is available to any child process of the shell.
		Some programs need environment variables in order to function correctly. Usually, a shell script
		defines only those environment variables that are needed by the programs that it runs.

		Shell Variables − A shell variable is a special variable that is set by the shell and is 
		required by the shell in order to function correctly. Some of these variables are environment 
		variables whereas others are local variables.
		
	Special Variables:
		$0: The filename of the current script.
		$n: These variables correspond to the arguments with which a script was invoked. 
			Here n is a positive decimal number corresponding to the position of an argument (the first argument is $1, the second argument is $2, and so on).
		$#: The number of arguments supplied to a script.
		$*: All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.
		$@: All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.
		$?: The exit status of the last command executed.
		$$: The process number of the current shell. For shell scripts, this is the process ID under which they are executing.
		$!: The process number of the last background command.
	
	Command-Line Arguments: The command-line arguments $1, $2, $3, ...$9 are positional parameters,
		with $0 pointing to the actual command, program, shell script, or function and $1, $2, $3, ...$9
		as the arguments to the command.

	Special Parameters $* and $@: There are special parameters that allow accessing all the command-line
		arguments at once. $* and $@ both will act the same unless they are enclosed in double quotes,
		"". Both the parameters specify the command-line arguments. However, the "$*" special parameter 
		takes the entire list as one argument with spaces between and the "$@" special parameter takes
		the entire list and separates it into separate arguments.
	
	Exit Status: The $? variable represents the exit status of the previous command.
	
	Defining Array Values:
		NAME[0]="Zara"
		NAME[1]="Qadir"
		NAME[2]="Mahnaz"
		NAME[3]="Ayan"
		NAME[4]="Daisy"
		echo "First Index: ${NAME[0]}"
		echo "Second Index: ${NAME[1]}"
	You can access all the items in an array in one of the following ways −
	${array_name[*]}
	${array_name[@]}
	
	Shell Basic Operators:
	Arithmetic Operators(+, -, *, /)
	Relational Operators(-eq, -ne, -gt, -lt, -ge, -le)
	Boolean Operators(OR, AND)
	
	-b file	Checks if file is a block special file; if yes, then the condition becomes true.	[ -b $file ] is false.
	-c file	Checks if file is a character special file; if yes, then the condition becomes true.	[ -c $file ] is false.
	-d file	Checks if file is a directory; if yes, then the condition becomes true.	[ -d $file ] is not true.
	-f file	Checks if file is an ordinary file as opposed to a directory or special file; if yes, then the condition becomes true.	[ -f $file ] is true.
	-g file	Checks if file has its set group ID (SGID) bit set; if yes, then the condition becomes true.	[ -g $file ] is false.
	-k file	Checks if file has its sticky bit set; if yes, then the condition becomes true.	[ -k $file ] is false.
	-p file	Checks if file is a named pipe; if yes, then the condition becomes true.	[ -p $file ] is false.
	-t file	Checks if file descriptor is open and associated with a terminal; if yes, then the condition becomes true.	[ -t $file ] is false.
	-u file	Checks if file has its Set User ID (SUID) bit set; if yes, then the condition becomes true.	[ -u $file ] is false.
	-r file	Checks if file is readable; if yes, then the condition becomes true.	[ -r $file ] is true.
	-w file	Checks if file is writable; if yes, then the condition becomes true.	[ -w $file ] is true.
	-x file	Checks if file is executable; if yes, then the condition becomes true.	[ -x $file ] is true.
	-s file	Checks if file has size greater than 0; if yes, then condition becomes true.	[ -s $file ] is true.
	-e file	Checks if file exists; is true even if file is a directory but exists.	[ -e $file ] is true.
	
	Shell Decision Making: 
		if...fi statement
		if...else...fi statement
		if...elif...else...fi statement
	Case: 
		case...esac statement
		
	Loop:
	a=0
	while [ "$a" -lt 10 ]    # this is loop1
	do
		b="$a"
		while [ "$b" -ge 0 ]  # this is loop2
		do
			echo -n "$b "
			b=`expr $b - 1`
		done
		echo
		a=`expr $a + 1`
	done
	
		
		